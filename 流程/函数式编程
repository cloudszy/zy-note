## 函数式编程

        *  函数式编程 (Functional Programming)
        
           1.函数是python内建支持的一种封装，把实现过程封装在一组组函数内，通过一层层调用函数，把任务简单化，这种模式称为面向过程设计
           2.函数是面向过程的基本单元
           3.在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言
           4.而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远
           5.封装的越少，越原始的编程语言，越贴近计算机
           5.纯粹的函数式编程没有变量，因为变量状态可以变化，有变量的函数式编程会有副作用
           6. 函数式编程，允许把函数本身作为参数传入另一个函数，再返回一个函数
           7.python不是纯函数式编程的编程语言
           
        *  高阶函数 (Higher-order function)
        
              1. 变量可以指向函数
              
                  ```python
                  
                  print abs(-10)   # 调用一个函数                  
                  
                  print abs        # 打印函数本身，所以返回一个对象，函数本身是封装好的，必须传入指定参数引用
                  
                  x = abs(-10)     # 把一个函数调用后的结果，赋值给一个变量x
                  
                  print x          # x 返回的是一个函数结果
                  
                  f = abs          # 给函数取个别名'f'
                  
                  pritn f          # 此时'f'其实就是'abs'函数，所以返回的是一个封装好的函数对象
                  
                  print f(-10)     # 直接调用'f'，相当于直接调用'abs'
                  
                  ```
                  10
                  <built-in function abs>   # 小结：任意一个函数的名字，都可以用一个变量来声明一个别名，声明之后函数调用过程一样，只是换个名字
                  10
                  <built-in function abs>
                  10
              
        
        *  函数名也是变量
        
              ```python       
              
              abs = 10         # 把10赋值给 abs之后，abs就是一个变量10了
              
              print abs(-10)   # 此时abs已经不是一个求绝对值的函数
              
              ```             # abs函数定义在__builtin__中，所以要在其他模块生效：__builtin__.abs = 10
             报错
        
        
        *  
        
        *
        
        *

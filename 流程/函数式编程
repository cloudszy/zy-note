## 函数式编程

        *  函数式编程 (Functional Programming)
        
           1.函数是python内建支持的一种封装，把实现过程封装在一组组函数内，通过一层层调用函数，把任务简单化，这种模式称为面向过程设计
           2.函数是面向过程的基本单元
           3.在计算机的层次上，CPU执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言
           4.而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远
           5.封装的越少，越原始的编程语言，越贴近计算机
           5.纯粹的函数式编程没有变量，因为变量状态可以变化，有变量的函数式编程会有副作用
           6. 函数式编程，允许把函数本身作为参数传入另一个函数，再返回一个函数
           7.python不是纯函数式编程的编程语言
           
        *  高阶函数 (Higher-order function)
        
              1. 变量可以指向函数
              
                  ```python
                  
                  print abs(-10)   # 调用一个函数                  
                  
                  print abs        # 打印函数本身，所以返回一个对象，函数本身是封装好的，必须传入指定参数引用
                  
                  x = abs(-10)     # 把一个函数调用后的结果，赋值给一个变量x
                  
                  print x          # x 返回的是一个函数结果
                  
                  f = abs          # 给函数取个别名'f'
                  
                  pritn f          # 此时'f'其实就是'abs'函数，所以返回的是一个封装好的函数对象
                  
                  print f(-10)     # 直接调用'f'，相当于直接调用'abs'
                  
                  ```
                  10
                  <built-in function abs>   # 小结：任意一个函数的名字，都可以用一个变量来声明一个别名，声明之后函数调用过程一样，只是换个名字
                  10
                  <built-in function abs>
                  10
              
        
           2.函数名也是变量
        
              ```python       
              
              abs = 10         # 把10赋值给 abs之后，abs就是一个变量10了
              
              print abs(-10)   # 此时abs已经不是一个求绝对值的函数
              
              ```             # abs函数定义在__builtin__中，所以要在其他模块生效：__builtin__.abs = 10
             报错
        
        
            3.传入函数 函数参数可以接收变量，变量也可以指向函数，所以一个函数可以接收另一个函数作为参数，这种函数为高阶函数
        
              ```python
              
              def add(x, y, f):           # 定义一个函数，可以传入3个参数
              
                     return f(x) + f(y)   # 分别用f去调用x，y
                     
              print add(-5, 5, abs)       # f传入的是一个abs求绝对值的函数，分别作用在x，y上(abs(-5) + abs(5) = 10)
              
              ```
              10                          # 编写高阶函数，就是为了让函数的参数去接收一个别的函数
              
              
        
        *  map/reduce
        
           1.map   
        
              ```python
              
              def f(x):
                     
                     return x * x
                     
              print map(f, range(1,10))      # map传入的第一个参数'f'即为函数对象本身
              
              print map(str, range(1,10))    # 转换成字符
              
              ```                            # map，就是接收一个函数和列表，把列表里每个元素分别调用一次函数
              [1, 4, 9, 16, 25, 36, 49, 64, 81]
              ['1', '2', '3', '4', '5', '6', '7', '8', '9']
              
              例子:
              
              ```python
              
              def tit(L):
              
                     return map(str.title, L)     # L作为一个接收参数的列表，str.title是一个把字符串首字母默认为大写的函数
                     
              print tit(['ss', 'aa', ''rr])       # map作为连接函数与参数一个媒介，把函数作用在列表的每个元素上
               
              ```
              ('Ss', 'Aa', 'Rr')
          
          2.reduce 也是接收一个函数和序列，只是这个函数必须是接收2个参数，reduec把结果和序列的下个元素做累积 
          
              ```python
              
              def add(x, y):      # 传入2个参数的函数
              
                     reduce x + y
                     
              print reduce(add, [1,3,5,7,9])  # 把1，3的和与下个元素5做累积，叠加下去
              
              ```
              25
              
              例子：
              
              ```python
              
              def power(L):                 # 定义一个函数 L为一个接收元素的序列
              
                     def mul(x, y):         # 再定义一个函数，必须有2个参数
                     
                            return x * y
                            
                     return reduce(mul, L)  # 把函数执行在序列里的每个元素上，再把元素的结果与序列的下个元素做累积
                     
              print power([1,2,3,4])
              
              ```
              24
              
         * filter (过滤函数)
            
             ```python
               
             def is_odd(n):
               
                   return n % 2 == 1   # 返回余数为1的数
                     
             filter(is_odd, [1, 2, 3, 4, 5, 6, 9, 10, 15])  # 接收一个函数与序列，并把函数作用在序列的每个元素上
               
             ```
             [1, 3, 9 , 15]    # 过滤除了余数为1的其他数
              
              
                     
        * sorted(排序函数)
        
              ```python
              
              print sorted([36, 5, 12, 9, 21])   # 给一个list排序
              
              def revesed_cmp(x, y):  # 定义一个倒序函数
              
                     if x > y:
                     
                            return -1
                            
                     if x < y:
                     
                            return 1
                            
                     return 0
                     
              sorted([36, 5, 12, 9, 21], revesed_cmp)  # 传入自定义函数，实现倒序
              
              ```
              [5, 9, 12, 21, 36]
              [36, 21, 12, 9, 5]
              
              例子： 给一个包含大小写的字符串排序 字母'Z' < 'a'
              
              ```python
              
              def cmp_ignore_case(s1, s2):
              
                     u1 = s1.upper()     # 把字符串统一转换成大写或者小写即可
                     
                     u2 = s2.upper()     # 声明2个局部变量，'u1'.'u2' 方便下面做比较
                     
                     if u1 < u2:
                     
                            return -1
                           
                    if u1 > u2:
                    
                            return 1
                            
                    return 0
                    
               sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)  
               
               ```
               ['about', 'bob', 'Credit', 'Zoo']
               
         
        *   返回函数
        
        
        
        *  匿名函数 (lambda) 传入函数时，不需要显示定义函数，直接传入匿名函数更方便
        
             例子：
             
             map(lambda x : x * x, range10())    
             
             [1, 4, 9, 16, 25, 36, 49, 64, 81]
             
             ```python
             
             def f(x):    f就是lambda,x：就是函数参数，x * x 就是实现过程
             
                   return x * x
                   
             ```python      
                   
             f = lambda x: x * x
             
             print f
             
             print f(5)
             
             ```
             <function <lambda> at 0x10453d7d0>
             25
             
             def build(x, y):
             
                     return lambda: x * x + y * y
                     
        *  装饰器 (Decorator)
           
             ```python    # 由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数
           
             def now():
         
                    print '2013-12-25'
                    
             f = now
            
             print f()
             
             print now.__name__  # 函数对象有一个__name__属性，可以拿到函数的名字
             
             print f.__name__
             
             ```
             2013-12-25
             'now'
             'now'
             
                 假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，
                 但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）
             
             ```python
             
             def log(func):
             
                     def wrapper(*args, **kw):    
                     
                            print 'call %s():' % func.__name__  
                            
                            return func(*args, **kw)
                            
                     retuen wrapper
                     
             @log
             
             def now():
             
                     print '2013-12-25'
                     
             now()        
             
             ```
             call now():
             2013-12-25
             
             
             
         *  偏函数（Partial function） 出自functools模块    
         
              ```python
              
              int('12345')  # int()函数式默认用十进制装换
              
              int('12345', base = 8)  # base是int额外提供的参数，这里可以设定为8进制
              
              int('12345', 16)       # 这里可以实现N进制的转换
              
              ```
              12345
              5349
              74565
             
             1.如果需要大量转换二进制字符串，可以重新定义一个函数，默认值固定为2即可
            
                 ```python
             
                 def int2(x, base = 2):
             
                 return int(x, base)  # 把默认参数base固定住
                     
                 print int2('1000000')
             
                 ```
                 64
            
             2.'functools.partial'可以直接定义一个偏函数，就是把一个函数的某些参数给固定住(设置默认值)
             
                 ```python
                 
                 import functools
                 
                 int2 = functools.partial(int, base = 2)
                 
                 print int2('1000000')
                 
                 ```
                 64
              
             3. 创建偏函数时，实际上接收的是 函数对象、*args和**kw，3个参数
             
                 int2 = functools.partial(int, base = 2)  # 这里接收一个**kw，也就是一个dicy，
                 
                 int2('10010')
                 
                 kw = {base: 2}
                 
                 int('10010', **kw)
                 
                 max2 = functools.partial(max, 10)  # 这里接收都是一个*args， 也就是个tuple，*是接收所有参数
                 
                 max2(5, 6, 7)
                 
                 args = (10, 5, 6, 7)
                 
                 max(*args)
             
             
             
             
                    
             
             
                 
             
             
             
                     
                     
           
             
        
             
            
        
           
                     
                   
                   
        
           
        
        
        
        *
        
        
        
        
        
        
        
        
        
        
        
        
        

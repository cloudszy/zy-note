## 面向对象高级编程

        * 面向对象高级编程
        
          1. 数据封装、继承、多态只是面向对象程序中程序设计中最基础的3个概念
          2. 多重继承、定制类、元类等，是面向对象高级编程的许多高级特性
          
          
        * 使用 MethodType（方法类型）
        
          1. 正常情况下，我们定义一个class，创建一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性
          
             ```python
             
             class Student(object):   # 定义一个类
             
                pass
                
             s = Student()           # 声明一个实例
             
             s.name = 'Michael'      # 动态给实例绑定一个属性
             
             print s.name
             
             def set_age(self, age): # 还可以给实例绑定一个方法
             
                self.age = age
                
             from types import MethodType  # 导入types的MethodType模块， MethodType函数，可以给实例绑定一个新的方法
             
             s.set_age = MethodType(set_age, s, Student)  # 传入的参数分别是，新增的方法，声明实例变量名，类名
             
             s.set_age(25) # 调用新增的 实例方法
             
             s.age 
             
             ```
             Michael
             25
  
          2. 但是 ，给一个实例绑定方法，对另一个实例是不起作用的
          
             ```python
             
             s2 = Student() # 创建新的实例
             
             s2.set_age(25) # 尝试调用方法   
             
             ```
             报错
             
          3. 给所有实例绑定方法：  
          
             ```pthon
             
             def set_score(self, score):
             
               self.score = score
               
             Student.set_score = MethodType(set_score, None, Student)   # None，没有指明具体是哪个实例，指的是全部实例
             
             s.set_score(100) # 给class绑定方法后，所有实例均可调用
             
             print s.score
             
             s2.set_score(99)

             print s2.score
             
             ```
             100
             99

          4. 通常，上面的set_score方法可以直接定义在class里面，但动态绑定允许我们在程序的运行的过程中动态的给class加上功能
  
  
  
        * 使用 __slots__
         
          1. 限制class属性，比如设定一个实例(student)，只允许添加name和score属性，用__slots__实现
          
              ```python
              
              class Student(object):
              
                  __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
                  
               s = Student() # 创建新的实例
               
               s.name = 'Michael' # 绑定属性'name'
               
               s.age = 25  # 绑定属性'age'
               
               s.score = 99 # 绑定属性'score'  # 定义的参数里，没有score这个参数，所以报错
               
               ```
               报错
               
          2. 由于'score'没有被放到__slots__中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。
          3. 使用__slots__要注意，__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的：
          
             ```python
             
             class GraduateStudent(Student):
             
                pass
                
             g = GraduateStudent()
             
             g.score = 9999    #  虽然是继承了父类的属性，但是如果要在自身的类别里，需要限制指定属性添加，需要从新用__slots__定义
             
             print g.score()   # 所以在本类中，没有继承__slots__的功能，还是可以随意添加任意的属性
             
             ```
             9999
             
     
           4. 除非在子类中也定义__slots__，这样，子类允许定义的属性就是自身的__slots__加上父类的__slots__
  
  
  
        * 使用@property
        
          1. 在绑定属性时，如果我们把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便修改
          
             s = Studengt()
            
             s.score = 9999
            
          2. 这显然不合逻辑。通过一个set_score()方法来设置成绩，在通过一个get_score()来获取成绩，这样在set_score方法里，就可以检测参数
          
             class Student(object):
             
                   def get_score(self):
                   
                         return self._score
                         
                   def set_score(self, value):
                   
                          if not isinstance(value, int):  # 如果不是整数，返回raise
                          
                                 raise ValueError('score must be an integer!')  
                                 
                          if value < 0 or value > 100:    # 如果不是0~100之间的数，返回raise
                          
                                 raise ValueError('score must be an 0 ~ 100!')
                                 
                          self._score = value
                          
               s = Studnet()
               s.set_score(60)  # 参数限制在 0~100 以内
               s.get_score()
               s.set_score(9999)  # 不符合数据类型，和超出参数设置范围则报错
               
               ```
               60
               报错
             
             
            3. 上面的调用方法又略显复杂，@property，装饰器可以把一个方法变成属性调用
            
               class Student(object):
               
                   @property         
                   def score(self):
                   
                         return self._score
                   
                   @score.setter      
                   def score(self, value):
                   
                          if not isinstance(value, int):  # 如果不是整数，返回raise
                          
                                 raise ValueError('score must be an integer!')  
                                 
                          if value < 0 or value > 100:    # 如果不是0~100之间的数，返回raise
                          
                                 raise ValueError('score must be an 0 ~ 100!')
                                 
                          self._score = value
               
               s = Student()
               
               s.score = 60
               
               s.score = 9999
               
               ```
               60
               报错
               
  _______________暂时空一下，
  ——————————————————
  ——————————————————————————————————————
  
  
        * 多重继承
        
          1. 继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能
          
             ```python
             
             class Animal(object): # 基类 Animal，没有继承任何类  所以继承类的原始对象，就是object
              
                   pass
                   
             class Mammal(Animal): # 哺乳动物，Mammal  继承父类动物的一个子类
             
                   pass
                   
             class Bird(Animal):  # 鸟类，Bird，继承父类动物的一个子类，算是哺乳动物的兄弟
              
                   pass
                   
             class Dog(Mammal):  # 狗，Dog，继承父类哺乳动物的一个子类，由于父类(Mammal)上面又有父类，Dog等于还有个爷爷Animal，一并继承下来
             
                   pass
                   
             class Bat(Mammal): # 蝙蝠，和狗一样，继承父类，再继承父类的父类，也就是基类，Dog的兄弟
             
                   pass
                   
            class Parrot(Bird): # 鹦鹉，另一支，算是旁系，继承父类(Bird)，再继承基类(Animal)，与Dog相比，有同一个爷爷，爸爸不同
            
                   pass
                   
            class Ostrich(Bird): # 鸵鸟，和鹦鹉一样，是兄弟，爸爸一样，和上面3个同个爷爷
            
                   pass
                   
            class Runnable(object): # 然后给2个功能 猎捕、飞行
            
                   def run(self):
                   
                     print ('Running...')
                     
            class Flyable(object): # 先定义好2个类，其实就是2个可继承的功能
            
                   def fly(self):
                   
                     print ('Flying...')
                   
            class Dog(Mammal, Runnable):  # 按需求去继承，把类名添加进去即可
            
                    pass
                    
            class Bat(Mammal, Flyable):  #  这样蝙蝠会有'哺乳动物'、哺乳动物会有'动物',还有飞行这个功能，飞行如果还有父类一并在继承
            
                    pass
  
  
        * Mixin （混合）
        
          1. 在设计类的继承关系时，通常，主线都是单一继承下来的，例如，Ostrich继承自Bird
          2. 但是要混入额外，通过多重继承可以实现，比如让Ostrich多继承一个Runnable，这种设计称为Mixin
          3. 为了更好的看出继承关系，给类目后面加Mixin后缀，RunnableMixin
          
             ```python
             
              class Dog(Mammal, RunnableMixin, CarnivrousMixin):
              
                     pass
                     
                     
          4. Mixin的目的就是给一个类增加多个功能，这样，在设计类的时候，通过多重继承来组合多个Mixin的功能,来解决设计多层次的复杂的继承关系   
          5. Python自带的很多库也使用了Mixin。
          6. 举个例子，Python自带了TCPServer和UDPServer这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，
             这两种模型由ForkingMixin和ThreadingMixin提供。通过组合，我们就可以创造出合适的服务来。
          7. 比如，编写一个多进程模式的TCP服务，定义如下：
          
             class MyTCPServer(TCPServer, ForkingMixin):
             
                     pass
                
          8. 编写一个多线程模式的UDP服务，定义如下：
           
              class MyUDPServer(UDPServer, ThreadingMixin):
              
                     pass
          
          9. 如果你打算搞一个更先进的协程模型，可以编写一个CoroutineMixin：
          
              class MyTCPServer(TCPServer, CoroutineMixin):
              
                     pass
           
           10. 这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。
           11. 由于Python允许使用多重继承，因此，Mixin就是一种常见的设计。
           12. 只允许单一继承的语言（如Java）不能使用Mixin的设计。
           
   
        * 定制类
        
          1. 看到类似__slots__这种形如__xxx__的变量或者函数名就要注意，这些在Python中是有特殊用途的
          2. __str__
             
            class Student(object):
            
                  def __init__(self, name):
                  
                     self.name = name
                     
            print Student('Michael')
            
            ```
            <__main__.Student object at 0x109afb190> 
                  
             
  
  
  
  
  
  
  

























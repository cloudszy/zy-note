## 模块

        *  模块（Module）
          
           1.把写的长长的代码，放入分类好的文件里，一个.py这样的文件就称为Module
           2. 这样大大提高了代码的可维护性，因为，代码不必从零开始写，python内置和第三方就有很多模块可以直接引用
           3.引用顺序，import os(python内置)，import PIP（第三方），import zy(自己写的)
           4.使用模块可以避免函数名和变量名冲突，相同的变量名和函数名可以分别在不同的模块中，自己定义的模块名字不要和内置函数名和内置函数模块名相同
           5.如果模块名字与其他模块名字冲突，还可以设置一个包，来组织模块。就是模块的上一级分类'包'，装模块的
           5.zhuyi.zy,意思是zy这个模块在zhuyi这个包内，from zhuyi import zy
           6.注意：每个包名下，一定要有一个__init__.py，这个文件必须存在，文件可以为空
           
           
         * 使用模块
         
             1. 如何创建一个标准模块
         
                #!/usr/bin/env python          # 标准注释，可以让hello.py这个文件直接在Unix/Linux/mac上运行
          
                # -*- coding: utf-8 -*-        # .py文件使用Utf-8编码  
           
                ' a test module '              # 表示模块文档注释,任何模块代码的第一个字符串都被视为模块的文档注释
           
                __author__ = 'Michael Liao'    # 使用'__author__'变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名 
          
                import sys                      # 导入一个系统模块 sys
           
                def test():
   
                   args = sys.argv            # 之后我们就有了一个sys的变量，可以.出sys的所有模块功能 比如: sys.agrs
         
               if len(args)==1:
        
                   print 'Hello, world!'
    
               elif len(args)==2:
        
                   print 'Hello, %s!' % args[1]
            
               else:
        
                   print 'Too many arguments!'

               if __name__=='__main__':        # 在python交互环境下，调用test可以直接执行test()上面的代码，否则不执行
   
                   test()
              
              
              
             2. 别名  
             
                ```python
                
                try:  # 先导入cStringIO 
                
                     import cStringIO as StringIO      
                     
                 except ImportError:  # 导入失败会捕获到ImportError
                 
                     import StringIO  # 继续导入StringIO 
                     
                     
             2.作用域
             
                 1. 正常的函数和变量名是公开的(Public)，可以被直接引用，比如:abs、abc、x123，PI..等
                 2. 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的:__author__，__name__
                 3. hello的模块定义文档注释也可以用特殊变量__doc__访问，我们自己的变量名一般不要用这种类型
                 4. 类似_xxx和__xxx这样的函数或变量就是非公开的(Private)，不应该被直接引用
             
                 ```python
                 
                 def _private_1(name):            # 私有函数\变量，隐藏内部实现逻辑
                 
                     return 'Hello, %s' % name
                     
                 def _private_2(name):
                 
                     return 'Hi, %s' % name
                     
                 def greetnig(name):            # 公开函数，外部直接可以引用
                 
                     if len(name) > 3:
                     
                            return _private_1(name)
                            
                     else:
                     
                            return _private_1(name)
                            
                   5. 我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来
                   6. 这样调用greeting()函数，不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法
                   7. 外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public
                     
              
         * 安卓第三方模块
         
             1. 通过setuptools这个工具完成第三方模块安转
             2. python封装了2个包管理工具: easy_install 和 pip
             3. sudo easy_install 包名
             4. sudo pip install 包名
             
         * 模块搜索路径
         
              ```python
              
              import sys
              
              print sys.path
              
              ```
              当前目录
              
              ```python
              
              import sys
              
              sys.path.append('/Users/michael/my_py_scripts')
              
              
         * 使用__future__
         
              1. __future__模块，把下一个新版本的特性导入当前版本，就可以在当前版本测试一下新版本的特性
              
             
              
                      
                      
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              
              

## 面向对象编程

        * 面向对象编程 (Obiect Oriented Programming,简称OOP)
        
          1. OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数
          2. 面向过程的程序设计把计算机程序视为一系列的命令合集，即一组函数的顺序执行。
          3. 为了简化程序设计，面向过程把函数继续切分为子函数执行，即把大块函数通过切割成小块函数来降低系统复杂度
          4. 面向对象的程序则是把计算机程序视为一组对象合集，而每个对象都可以接收其他对象发过来的消息，并处理这些消息
          5. 计算机程序的执行就是一系列消息在各个对象之前的传递
          6. 所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类(class)的概念
          
              ```python
              
              chass Student(object):  # Student 这种数据类型视为一个对象
              
                  def __init__(self, name, score):  # 这个对象拥有name，score这个2个属性(Property)
                  
                      self.name = name              # 如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象
                      
                      self.score = score
                      
                  def pirnt_score(self):            # 然后，给这个对象发一个print_score的消息，让对象自己把自己的数据打印出来
                  
                      print '%s: %s' % (self.name, self.score)
                      
                  bart = Student('Bart Simpson', 59)  # 给对象发消息实际上就是调用对象应该的关联函数，我们称为对象的方法(Method)
                  
                  lisa = Student('Lisa simpson', 87)
                  
                  print bart.print_score()
                  
                  print lisa.print_score()
                  
                  ```
                  Bart Simpson: 59
                  Lisa Simpson: 87
                  
                  1. 类(class)和实例(instance)
                  2. Class是一种抽象的概念，比如我们定义的Calss-Studnt，是指学生这个概念
                  3. 而instance则是一个个具体的Student，比如:Bart Simpson和Lisa Simpson的两个具体的Student
                  4. 所以，面向对象的设计思想是抽象出Class，根据Class创建出instance
                  5. 面向对象的抽象又比函数要高，因为一个Calss既包含数据，又包含操作数据方法
                  6. 数据封装、继承和多态是面向对象的三大特点
                  
                  
                  
        * 类和实例 (class\ instance)
        
            ```python
            
            class Studnet(object): # 创建一个Studnet的类  （一个实现过程） 方法
            
                 pass
                 
            bart = Student()       # 声明一个类的实例      （一个具体对象）数据
             
            print bart             # 方法统一，操作不一样的数据
            
            print Student
            
            ```
            <__main__.Student object at 0x10a67a590>
            <class '__main__.Student'>
            
              1. 类是抽象的 '模板'， 实例是根据类创建出来的一个具体对象
              2. 每个对象都拥有相同的方法，当是各自的数据可能不同
              3. class后面接着是类名，既Student，类名开头字母一般大写，紧接着是一个(object),表示该类从哪个类继承下来的
              4. 创建实例，是通过类名+()实现
              5. 变量bart指向一个Student的object，后面的0x10a67a590>是内存地址，每个object的地址都不一样，而Student本身则是一个类
              
            ```python
            
            bart.name = 'Bart Simpson'  # 可以自由的给一个实例变量绑定属性 这里给bart绑定一个name属性
            
            print bart.name
            
            ```
            'Bart Simpos'
            
              6. __init__，可以强行绑定一些属性
              
            ```python
            
            class Student(object):
            
                def __init__ (self, name, score):
                
                    self.name = name
                    
                    self.score = score
                    
             bart = Student('Bart Simpson', 59)
             
             print bart.name
             
             print bart.score
             
             ```
             'Bart Simpos'
             59
             
                    
               7. __init__ 方法的第一个参数永远是self，表示创建的实例本身
               8. __init__ 在创建的时候，不能传入空参数，必须传入与__init__方法匹配的参数，self不需要传
               9. 和普通函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且调用时，不用传递参数
               10. 另外一样可以传入默认参数、可变参数、关键字参数
               
            
        * 数据封装
            
            ```python  # 面向对象编程的一个重要的特点，数据封装
            
            def print_score(srd): # 在上面Student的类中，每个实例就拥有各自的name和score这些数据
            
              print '%s: %s' % (std.name, std.score)  # 我们可以通过一个函数来访问这些数据
               
            print_score(bart)  # 数据封装 其实就是把方法和数据全部绑定到类， 外部只需要提供数据参数，就可以直接获得执行结果
            
            ```
            Bart Simpson
            
            1.Student实例本身就拥有这样数据，要访问这些数据，没有必要从外面的函数取访问，可以直接在Student类的内部定义访问数据的函数
            2. 这样就把数据封装起来了，这些封装的数据的函数是和Student类本身是关联起来的，我们称之为类的方法
            
            ```python
            
            class Student(object):
            
              def __init__(self, name, score):
              
                     self.name = name
                     
                     self.score = score
                     
              def print_score(self):
              
                     print '%s: %s' % (self.name, self.score)
                     
              bart.print_score()
              
              ```
              Bart Simpson: 59
                     
             3. 要定义一个方法，除了第一个函数式self外，其他和普通函数一样
             4. 要调用一个方法，只需要在实例变量上直接调用，除了self不用传参数，其他参数正常传入
             5. 这样从外部看来Student类，只需要知道，创建实例需要给出name和score，如何打印是在Student内部定义的
             6. 这些数据和逻辑被封装起来了，调用很容易，但却不知道内部实现细节
             7. 封装的另外一个好处是可以给Student类增加新的方法，比如get_grade
             
             ```python
             
             class Student(object):
             
              ···
              
              def get_grade(self):
              
                     if self.score >= 90:
                     
                            return 'A'
                            
                     elif self.score >= 60:
                     
                            return 'B'
                            
                     else:
                     
                            return 'C'
                            
               bart.get_grade()
                
               ```
               C
                         
               8.同样的，get_grade()方法可以直接在实例变量上调用，不需要知道内部实现细节
               9.类是创建实例的模板，而实例则是一个个具体的对象，各个实例拥有独立的数据，互不影响
               10.方法，就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据
               11.通过在实例上调用方法，我们就可以直接操作对象内部的数据，但无需知道方法内部的实现细节
               12.和静态语言不同，python允许实例变量绑定任何数据
               13.也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但是拥有的变量名称都可能不同
               
                  ```python
                  
                  bart = Student('Bart Simpson', 59)
                  
                  lisa = Student('Lisa Simpson', 87)
                  
                  bart.age = 8   # 这里只是给bart声明了一个 age的参数为8
                  
                  print bart.age
                  
                  print lisa.age    # lisa虽然是同一个类的实例，但是因为实例之间数据是独立的，所以lisa并没有age这个参数
                  
                  ```
                  8
                  报错
                  
               
                  
        * 访问限制
        
              1. 在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样就隐藏了内部复杂逻辑
              2. 但是，从前面Student类的定义来看，外部代码还是可以自由的修改一个实例的name、score属性
              
                 ```python
                 
                 bart = Student('Bart Simpson', 98)
                 
                 print bart.score
                 
                 bart.socre = 59
                 
                 print bart.score
                 
                 ```
                 98
                 59
                 
               3. 如果要让内部属性不被外部访问，可以把属性的名称加上两个__，在python中，实例的变量名如果以__开头，就是一个私有变量(Private)
               4. private只有内部可以访问，外部不能访问
               
                  ```python
                  
                  class Student(object):
                  
                     def __intit__(self, name, score):
                     
                            self.__name = name
                            
                            self.__score = score
                            
                     def print_score(self):
                     
                           print '%s: %s' % (self.__name, self.__score)
                           
                     bart = Stundet('Bart Simpson', 98)
                     
                     print bart.__name
                     
                     ```
                     报错
                           
                  5. 对于外部代码来说，已经无法从外部访问 实例变量.__name和实例变量.__socre      
                  6. 这样就确保外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮
                  7. 如果外部代码要获取name和score属性，可以给Student类增加'get_', get_name\get_score
                  
                    ```python
                    
                    class Student(object):
                    
                        ···
                        
                        def get_name(self):
                        
                             return self.__name
                           
                        def get_score(self):
                        
                             return self.__score
                             
                    7. 如果外部代码要修改name和score属性，可以给Student类增加'srt_', set_name\set_score
                    
                       ```python
                    
                    class Student(object):
                    
                        ···
                        
                        def set_name(self, name):
                        
                              self.__name = name
                           
                        def set_score(self, score):
                        
                              self.__score = score
                          
                     8. 在方法中，可以对参数做检查，避免传入无效参数
                     
                         
                       ```python
                    
                       class Student(object):
                    
                        ···
                        
                        def set_score(self, score):
                        
                            if 0 <= score <= 100:     # 限制socre 大于等于0，小于等于100
                            
                                   self.__score = score
                                   
                            else:    # 否则报错
                            
                                   raise ValueError('bad score')9.
                                   
                                   
                        
                     9. __xxx___，开头的变量名，是特殊变量，特殊变量可以直接访问，不是Private变量，所以不能用__name__、__score__这样的变量名
                     10. _name，私有变量，可以访问，当是不要随便访问
                     11. __name，可以通过_Student__name来访问__name变量，但是强烈不建议这么干,不同版本的解释器，__name变量名不同
                     
                         ```python
                         
                         print bart._Student__name
                         
                         ```
                         'Bart Simpson'
             
                  
                  
        * 继承和多态
        
              1. 当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类(Subclass)
              2. 而被继承的class称为基类、父类或者超类(Base class Super class)
              
                 ```python
                 
                 class Animal(object): # 父类
                 
                     def run(self):
                     
                            print 'Animal is running...'
                 
                 class Dog(Animal):  # 继承父类的 子类，拥有父类的所有功能
                 
                     pass
                     
                 class Cat((Animal): # 继承父类的 子类，拥有父类的所有功能
                 
                     pass
                     
                 dog = Dog()
                 
                 dog.run()
                 
                 cat = Cat()
                 
                 cat.run()
                 
                 ```
                 Animal is running...
                 Animal is running...
                 
                 
              3. 同样可以对子类增加一些方法
              
                 class Dog(Animal):
                 
                     def run(self):  
                     
                            print 'Dog is running...'
                            
                     def eat(self):
                     
                            print 'Eating meat...'
                            
               4. 当子类和父类都存在相同的run()方法时,子类的run()会覆盖了父类的run()
               5. 在代码运行的时候，总是会调用子类的run()。这样，我们就获得了继承的另一个好处：多态
               
                  ```python
                  
                  class Dog(Animal):      
                  
                     def run(self):  # 子类可以继承父类所有的方法，也可以覆盖父类的方法
                     
                            print 'Dog is running...'
                            
                  class Cat(Animal):
                  
                     def run(self):
                     
                            print 'Cat is running...'
                            
                  ```
                  Dog is running...
                  Cat is running..
                  
               
               6. 当我们定义了一个class的时候，我们实际上就定义了一种数据类型
               
                  a = list() # a 是list类型
                  
                  b = Animal() # b是Animale类型
                  
                  c = Dog() # c是Dog类型
                  
                  
                7. 判断一个变量是否是某个类型的数据类型用'isinstance()'
                
                    ```python
                    
                    isinstance(a, list)
                    
                    isinstance(b, Animal)
                    
                    isinstance(c, Dog)
                    
                    isinstance(c, Animal)
                    
                    ```
                    True
                    ...
                  
                 8. c不仅是Dog，还是Animal，因为Dog是从Animal继承下来的，Dog本来就是Animale的一种
                 9. 所以在继承关系中，一个实例的数据类型是某个子类，拿它的数据类型也可以被看做是父类，反过来就不行
                 
                    ```python
                    
                    b = Animal()
                    
                    isinstangce(b, Dog)
                    
                    ```
                    False
                 
                 10. 子类可以被看做为父类，父类不可以看做为子类
                 
                     ```python
                     
                     def run_twice(animal):  # 父类再定义一个 函数   返回2次animal
                     
                            animal.run()
                            
                            animal.run()
                            
                      run_twice(Animal())  
                      
                      run_twice(Dog())      # 继承父类的 下属所有子类，通通跟着返回2次
                      
                      run_twice(Cat())
                      
                      ```
                      Animal is running...
                      Animal is running...
                      Dog is running...
                      Dog is running...
                      Cat is running...
                      Cat is running...
                      
                      ```python
                      
                      class Tortoise(Animal):  # 再定义一个Trotoise子类
                      
                            def run(self):    
                            
                                   print 'Tortoise is running slowly...'
                                   
                      run_twice(Tortoise())  # 方法是不需要在做任何改变
                      
                      ```
                      Tortoise is running slowly...  # 即可得到父类继承的，方法，并返回一个结果
                      Tortoise is running slowly...
                      
                      
                 10. 任何依赖Animal作为参数的函数或者方法都可以不加修改的正常运行，原因在于多态
                 11. 多态的好处就是，当我们需要传入Dog、Cat、Tortoise...时，我们只需要接收Animal类型就可以了
                 12. 因为都是Animal的子类，Animale类型的拥有run()方法，子类们都会自动调用实际类型的run()方法，这就是多态
                 13. 对于一个变量，我们只需要知道它是Animal类型，无需确切的知道它的子类型，就可以放心的调用run()方法
                 14. 调用方只管调用，不管细节，而我们新增一种Animal子类时，只要确保run()方法编写正确，不要管原来的代码如何调用，这就是'开闭'原则
                 15. 对扩展开放: 允许新增的子类  （可以随时增加新的子类，直接继承父类所有功能）
                 16. 对修改封闭: 不需要修改依赖Animal的类型run_twice()等函数  （父类的功能不需要改变，直接继承直接使用，还可以直接覆盖父类的功能）
                 17. 继承可以把父类所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不合适的地方覆盖
                 18. 有了继承，才有多态，在调用类实例方法的时候，尽量把变量视作父类类型，这样，所有的子类类型都可以正常接收
                 
                 
                 
                 
                     
                     
                     
                     
                 
                  
                  
                  
                  
                  
                  
                  
                   
                  
                  
                  
                  
                  
                  
        
        
        

##IO编程 

        * 简介
          1.IO在计算机中指Input、Output，也就是输入与输出。
          2.涉及到数据交换的地方、通常是磁盘、网络等，就需要IO借口。
          3.请求访问网页，为'Output'，接收网页信息，为'Input'
          4.读取磁盘文件和写文件到磁盘文件里，只有一个单向操作。
          5.CUP和内存速度远远高于外设的速度
          6.CPU等待IO执行后，再执行后续代码为同步IO
          7.CPU不等带IO执行代码，跳过IO直接执行后续代码为异步IO
          8.异步IO编写程序性能远远高于同步IO
          
        * 文件读写
          
           f = open('/Users/ZY/Desktop/zy.txt', 'r')   # 使用内置函数open()，传入文件路径与文件名， 'r'表示读
         
           f.read()  # 函数read()方法可以一次性读取文件全部内容
         
           f.close() # 最后一步调用close()方法关闭文件，打开文件必须关闭，否则会占用操作系统的资源
         
                 ```python         
         
                 try:
          
                     f = open('/Users/ZY/Desktop/zy.txt', 'r')
             
                     print f.read()
            
                finally:
          
                if f:
              
                    f.close()
                    
                ```    
              
              
            1.为了防止文件读写时产生IOError，所以，使用try...finally语句，不管文件是否读取成功，一样能正确关闭该文件
            
                ```python
                
                with open(('/Users/ZY/Desktop/zy.txt', 'r') as f:
            
                print f.read()
                
                ```
              
             1.with和前面的try...finally是一样的，代码更简洁，并且不必调用f.close()方法
             2.调用read()会一次读取文件的全部内容，如果文件太大，内存就爆了，所以可以反复调用read(size)方法
             3.readline()为读取一行内容
             4.readlines()为一次读取所以内容并按行返回list
             5.如果文件很小用read()，如果不确定文件大小，则反复调用read(size)比较保险，如果是配置文件，则调用readlines（)
             
                ```python
             
                for line in f.readlines():
           
                print(line.strip())        # 把末尾的'\n' 删掉
                
                ```
              
              
           
              
           * file-like Obiect 
             
             1.像open()函数返回的这种有个read()方法的对象，在Python中统称为file-like Object。
             2.除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个read()方法就行。
             3.StringIO就是在内存中创建的file-like Object，常用作临时缓冲。
           
              
           * 二进制文件
           
                ```python
           
                f = open('Users/ZY/Desktop/zy.jpg', 'rb')   # 读取ASCLL的文本文件，二进制文件，图片、视频等，用'rb'模式打开
             
                f.read()
                
                ```
               
            * 字符编码
            
                ```python
           
                  f = open('Users/ZY/Desktop/gbk.txt', 'rb')   # 要读取非ASCLL编码文本文件，就必须以二进制模式打开，在解码。
             
                  u = f.read().decode('gbk')
                  
                ```   
               
            * codecs  模块读文件时自动转换编码，直接读出nuicode
            
                ```python
             
                import codecs
             
                with codecs.open('Users/ZY/Desktop/gbk.txt', 'r', 'gbk') as f:
               
                       f.read()   
                       
                ```       
                  
            * 写文件  
            
                ```python
            
                f = open('/Users/ZY/Desktop/zy.txt', 'w')    # 传入'w'\'wb'，表示写文本文件，写二进制文件
            
                f.write('Hello, world!')
               
                f.close()
                
                ```
               
                  1.反复调用weite()来写入文件，务必要调用f.close()来关闭文件
                  2.调用close()方法时，操作系统会把没有写入的数据全部写入磁盘
                  3.用with语句才保险
                  
                ```python    
                  
                with open('/Users/ZY/Desktop/zy.txt', 'w') as f:
            
                      f.write('Hello, world!')
                 
                ```    
                
                
            * 小结
            
              1.文件读写是通过open()函数打开的文件对象完成的，使用with语句操作文件IO是个好习惯
              2.要写入特定编码的文本文件，请效仿codecs的实例，写入unicode，有codecs自动装换成指定编码
              
              
            * 操作文件和目录
            
                ```python
            
                import os
              
                os.name    # 操作系统名字
                
                ```
                
                1.posix 系统为 Linux、unix、或Mac os X
                2.nt 系统为 windows
                3.要获取系统详细信息，调用uname()函数  
                4.uname()函数在windows上不提供，os模块的某些函数跟操作系统相关
                
            * 环境变量
           
               os.environ  # 操作系统定义的环境变量，全部保存在os.environ这个dict里查看
             
               os.getenv('PATH')  # 要获取某个变量的值，可以调用os.getenv()函数
             
            * 操作文件和目录
           
               os.path.abapath('.')  # 查看当前目录的绝对路径
             
               os.path.join('/Users/ZY/Desktop/', 'zy')  # 在某个目录下创建一个新目录，首先把新目录完整路径表示出来
               
               os.mkdir('/Users/ZY/Desktop/zy')  #  创建一个目录
               
               os.rmdir('/Users/ZY/Desktop/zy')  #  删掉一个目录
               
            * 1.把两个路径合成一个时，不要直接拼字符串，而要通过os.path.join()函数，这样可以正确处理不同操作系统的路径分隔符。
              2.在Linux/Unix/Mac下，os.path.join()返回这样的字符串:part-1/part-2
              3.windows下返回: part-1\part-2
              
              
            * 小结
            
              1.os模块封装了操作系统的目录和文件操作，要注意这些函数有得在os模块中，有的在os.path模块中
              
              
              
          * 序列化 （pickling）
          
          ```python
          
          d = dict(name = 'Bob', age = 20, score = 88)
          
          ```
          
         * 1.在程序过程中，所以变量都是在内存中
            2.变量可以随时修改，把name改成'Bill'，但是程序结束后，变量所占的内存就被操作系统全部收回，重启程序，变量有初始化为'Bob'
            3.我们把变量从内存中变成可以存储或传输的过程称为序列化(pickling)
            4.序列化之后，就可以把内容写入磁盘，或者通过网络传输到别的机器上
            5.把变量从序列化的对象重新读到内存里称为反序列化(unpickling)
            6.Python提供2个模块反序列化，cPickling、Pickling，区别是一个C语音写的，一个Python写的，C语言写的速度快
            
            ```python
            
            try：
              
                import cPickle as pcikle   
              
              except ImportError:
              
                import pickle
            
            ```    
           
           7.如果cPickling导入失败，则导入Pickling   
           
            ```python
            
             d = dict(name = 'Bob', age = 20, score = 88) # 把任意一个对象序列化成为str，然后把str写入文件
           
             pickle.dumps(d)
             
            ```  
             
            8.str对象，使用pickle.loads()方法反序列化；文件对象使用pickle.load()方法反序列化
            
            ```python
            
            f = open('dump.txt', 'rb')    # 打开一个txt文件对象  赋值变量(f)
            
            d = pickle.load(f)            # 使用pickle.load反序列化对象(f)  赋值变量(d)
            
            f.close()                     # 记住关闭文件
            
            print d                       # 打印内容相同，当时变量d和原来的变量完全不相干了
            
            ```
      
      * JSON
      
           1.要在不同的编程对象之间传递对象，就必须把对象序列化为标准格式，比如XML、更好的方法是反序列化为JSON
           2.JSON表示的是一串字符串，可以被所以语言读取，方便存储到磁盘或者通过网络传输，速度也比XML快
           3.JSON表示对象是标准JavaScript语言对象
           
             JSON类型     Python类型
             {}           dict
             []           list
             "steing"     'str'或者u'unicode'
             1234.56      int\flioat
             true/false   True/False
             null         None
             
             
            ```python
            
            import json      
            
            d = dict(name = 'Bob', age = 20, score = 88)  # 声明一个字典并传入参数，赋值变量 (d)
            
            json.dumps(d)    # 装换为JSON格式
            
            ``` 
            
            1.dumps()方法返回一个str,dump方法作用在一个文件上
            2.loads()方法返回一个str序列化，load()方法则把一个文件反序列化
            
            ```python
            
            json_str = '{"age": 20, "score": 88, "name": "Bob"}'
            
            json.loads(json_str)
            
            ```
            
            {u'age': 20, u'score': 88, u'name': u'Bob'}
            
            1.反序列化所得到的所有字符串默认都是unicode而不是str
            2.JSON标准UTF-8
            
            
         * JSON进阶
         
         
            
            
             
           
           
            
           
            
           
            
            
            
            
            
           
             
           
              
              
            
            
               
               
               
               
               
                 
               
               
               
               
               
               
               
               
               
               
               
               
               
               
               
           
           
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
          
        
         
         
         
          
            
